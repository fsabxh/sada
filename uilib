-- // Tokyo UI Library (Fixed Base) // --

local HttpService = game:GetService("HttpService")

local folderPath = "C:\\TokyoConfigs"
if not isfolder(folderPath) then
    makefolder(folderPath)
end

local library = {
    flags = {},
    binds = {},
    cheatname = "Tokyo",
    gamename = "Da Hood"
}

-- // Init
function library:init()
    print(self.cheatname .. " | " .. self.gamename .. " loaded.")
end

-- // Save Config
function library:SaveConfig(name)
    local path = folderPath .. "\\" .. name .. ".json"
    writefile(path, HttpService:JSONEncode(self.flags))
    print("Config saved:", path)
end

-- // Load Config
function library:LoadConfig(name)
    local path = folderPath .. "\\" .. name .. ".json"
    if isfile(path) then
        local data = HttpService:JSONDecode(readfile(path))
        for k,v in pairs(data) do
            self.flags[k] = v
        end
        print("Config loaded:", path)
    else
        warn("Config not found:", name)
    end
end

-- // Window
function library.NewWindow(args)
    local window = {}
    window.tabs = {}

    function window:AddTab(name)
        local tab = {}
        tab.sections = {}

        function tab:AddSection(secName, side)
            local section = {}
            section.name = secName

            function section:AddToggle(name, flag, default, callback)
                library.flags[flag] = default or false
            end

            function section:AddSlider(name, flag, min, max, default, callback)
                library.flags[flag] = default or min
            end

            function section:AddDropdown(name, flag, options, default, callback)
                library.flags[flag] = default or options[1]
            end

            function section:AddTextbox(name, flag, default, callback)
                library.flags[flag] = default or ""
            end

            function section:AddBind(name, flag, default, callback)
                library.binds[flag] = default
            end

            tab.sections[secName] = section
            return section
        end

        window.tabs[name] = tab
        return tab
    end

    return window
end

-- // Settings Tab
function library:CreateSettingsTab(window)
    local tab = window:AddTab("Settings")

    local sec = tab:AddSection("Configs", 1)
    sec:AddTextbox("Config Name", "configname", "default")
    sec:AddToggle("Autosave", "autosave", false)

    sec:AddBind("Save Config", "savebind", Enum.KeyCode.F6, function()
        self:SaveConfig(self.flags["configname"])
    end)

    sec:AddBind("Load Config", "loadbind", Enum.KeyCode.F7, function()
        self:LoadConfig(self.flags["configname"])
    end)

    return tab
end

return library
